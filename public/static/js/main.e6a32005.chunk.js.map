{"version":3,"sources":["utils/token.js","graphql/user.js","routes/UserRoute.js","routes/PublicRoute.js","components/Header.js","graphql/post.js","components/PostCreator.js","graphql/like.js","components/Post.js","components/PostsData.js","views/home.js","views/login.js","utils/email.js","views/register.js","components/cqrs/PostCreator1.js","components/cqrs/Post1.js","components/cqrs/PostsData1.js","views/cqrs/home1.js","components/cqrs/PostCreator2.js","components/cqrs/Post2.js","components/cqrs/PostsData2.js","views/cqrs/home2.js","components/cqrs/PostCreator3.js","components/cqrs/Post3.js","components/cqrs/PostsData3.js","views/cqrs/home3.js","components/Routes.js","utils/theme.js","components/App.js","utils/links.js","index.js"],"names":["accessToken","setAccessToken","token","getAccessToken","meQuery","gql","createUserMutation","loginUserMutation","logoutUserMutation","fullLogoutUserMutation","UserRoute","Component","component","rest","cache","client","readQuery","query","data","useQuery","fetchPolicy","skip","isUser","me","render","props","to","pathname","state","from","location","PublicRoute","useStyles","makeStyles","root","flexGrow","title","button","margin","color","HideOnScroll","children","trigger","useScrollTrigger","Slide","appear","direction","in","Header","classes","history","useHistory","useMutation","logout","fullLogout","block","AppBar","position","Toolbar","Typography","variant","className","name","Button","onClick","a","push","refetch","resetStore","postsQuery","postsOneQuery","postsTwoQuery","postsThreeQuery","createPostQuery","createPostOneQuery","createPostTwoQuery","createPostThreeQuery","PostCreator","user","createPost","useState","content","setContent","submit","useRef","style","marginTop","Container","onSubmitCapture","e","preventDefault","variables","current","visibility","TextField","multiline","fullWidth","placeholder","minRows","value","textAlign","onChange","target","ref","type","likePost","likePostOne","likePostTwo","likePostThree","unlikePost","unlikePostOne","unlikePostTwo","unlikePostThree","post","maxWidth","minWidth","Post","item","isLikedByUser","Favorite","FavoriteBorder","likeButton","setLikeButton","likes","likeButtonText","setLikeButtonText","like","unlike","Grid","xs","Paper","elevation","ListItem","ListItemText","wordWrap","primary","secondary","ListItemIcon","IconButton","size","parseInt","id","icon","text","IconText","React","createElement","PostsData","loading","fetchMore","posts","map","x","i","Fragment","List","hasMore","length","onEnter","limit","cursor","updateQuery","pv","fetchMoreResult","__typename","Home","setState","useLocation","refetchQueries","include","theme","paper","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","main","form","width","Login","email","setEmail","password","setPassword","login","Avatar","noValidate","update","store","loginUser","writeQuery","response","clearStore","required","label","autoComplete","autoFocus","container","textDecoration","isEmailValid","test","Register","setName","register","justifyContent","PostCreatorOne","PostOne","PostsDataOne","postsOne","HomeOne","PostCreatorTwo","PostTwo","PostsDataTwo","postsTwo","HomeTwo","PostCreatorThree","PostThree","PostsDataThree","postsThree","HomeThree","Routes","exact","path","darkTheme","createTheme","App","setLoading","useEffect","fetch","method","credentials","then","json","ThemeProvider","CssBaseline","httpLink","HttpLink","uri","authLink","ApolloLink","operation","forward","setContext","headers","Authorization","tokenRefreshLink","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","exp","jwtDecode","Date","now","isAccessTokenValid","fetchAccessToken","handleFetch","ApolloClient","InMemoryCache","typePolicies","keyFields","link","ReactDOM","StrictMode","ApolloProvider","document","getElementById"],"mappings":"wRAEIA,EAAc,GAEX,SAASC,EAAeC,GAC3BF,EAAcE,EAGX,SAASC,IACZ,OAAOH,E,0FCPEI,EAAUC,YAAH,wHAoBPC,GAVaD,YAAH,2HAUWA,YAAH,qQAUlBE,EAAoBF,YAAH,mSAajBG,EAAqBH,YAAH,uEAMlBI,EAAyBJ,YAAH,2E,OC7CtBK,EAAY,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAyBC,EAAW,6BACtDC,EAAQC,GAAOC,UAAU,CAAEC,MAAOb,IAEhCc,EAASC,YAASf,EAAS,CAC/BgB,YAAa,eACbC,KAAMP,IAFFI,KAKJI,GAAS,EAMb,OAJKR,GAASA,EAAMS,IAAQL,GAAQA,EAAKK,MACrCD,GAAS,GAIT,cAAC,IAAD,2BACQT,GADR,IAEIW,OAAQ,SAACC,GAAD,OACJH,EACI,cAACX,EAAD,eAAec,IAEf,cAAC,IAAD,CACIC,GAAI,CACAC,SAAU,SACVC,MAAO,CAAEC,KAAMJ,EAAMK,kBCxBpCC,EAAc,SAAC,GAAuC,IAA1BpB,EAAyB,EAApCC,UAAyBC,EAAW,6BACxDC,EAAQC,GAAOC,UAAU,CAAEC,MAAOb,IAEhCc,EAASC,YAASf,EAAS,CAC/BgB,YAAa,eACbC,KAAMP,IAFFI,KAKJI,GAAS,EAMb,OAJKR,GAASA,EAAMS,IAAQL,GAAQA,EAAKK,MACrCD,GAAS,GAIT,cAAC,IAAD,2BACQT,GADR,IAEIW,OAAQ,SAACC,GAAD,OACHH,EAGG,cAAC,IAAD,CACII,GAAI,CACAC,SAAU,IACVC,MAAO,CAAEC,KAAMJ,EAAMK,aAL7B,cAACnB,EAAD,eAAec,S,uEClB7BO,GAAYC,aAAW,iBAAO,CAChCC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHD,SAAU,GAEdE,OAAQ,CACJC,OAAQ,EACRC,MAAO,eAIf,SAASC,GAAaf,GAAQ,IAClBgB,EAAahB,EAAbgB,SACFC,EAAUC,cAEhB,OACI,cAACC,EAAA,EAAD,CAAOC,QAAQ,EAAOC,UAAU,OAAOC,IAAKL,EAA5C,SACKD,IAKN,SAASO,GAAOvB,GACnB,IAAMwB,EAAUjB,KACVkB,EAAUC,cAFU,EAGGC,YAAY5C,GAHf,mBAGnB6C,EAHmB,KAGTtC,EAHS,KAGTA,OAHS,EAILqC,YAAY3C,GAA1B6C,EAJmB,oBAMpBxC,EAAQC,EAAOC,UAAU,CAAEC,MAAOb,IAEhCc,EAASC,YAASf,EAAS,CAC/BgB,YAAa,eACbC,KAAMP,IAFFI,KAKJI,GAAS,EAMb,OAJKR,GAASA,EAAMS,IAAQL,GAAQA,EAAKK,MACrCD,GAAS,GAGTA,EAEI,cAACkB,GAAD,2BAAkBf,GAAlB,IAAyB8B,MAAM,OAA/B,SACI,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWZ,EAAQb,MAA5C,oBACYtB,EAAMS,GAAGuC,KADrB,OAGA,cAACC,EAAA,EAAD,CACIF,UAAWZ,EAAQZ,OACnB2B,QAAO,sBAAE,sBAAAC,EAAA,sDACLf,EAAQgB,KAAK,CACTvC,SAAU,IACVC,MAAO,CAAEuC,SAAS,KAHjB,2CAFb,kBAWA,cAACJ,EAAA,EAAD,CACIF,UAAWZ,EAAQZ,OACnB2B,QAAO,sBAAE,sBAAAC,EAAA,sDACLf,EAAQgB,KAAK,CACTvC,SAAU,SACVC,MAAO,CAAEuC,SAAS,KAHjB,2CAFb,oBAWA,cAACJ,EAAA,EAAD,CACIF,UAAWZ,EAAQZ,OACnB2B,QAAO,sBAAE,sBAAAC,EAAA,sDACLf,EAAQgB,KAAK,CACTvC,SAAU,SACVC,MAAO,CAAEuC,SAAS,KAHjB,2CAFb,oBAWA,cAACJ,EAAA,EAAD,CACIF,UAAWZ,EAAQZ,OACnB2B,QAAO,sBAAE,sBAAAC,EAAA,sDACLf,EAAQgB,KAAK,CACTvC,SAAU,SACVC,MAAO,CAAEuC,SAAS,KAHjB,2CAFb,oBAWA,cAACJ,EAAA,EAAD,CACIF,UAAWZ,EAAQZ,OACnB2B,QAAO,sBAAE,sBAAAC,EAAA,sEACCZ,IADD,cAELpD,EAAe,IAFV,SAGCc,EAAOqD,aAHR,OAILlB,EAAQgB,KAAK,UAJR,2CAFb,oBAWA,cAACH,EAAA,EAAD,CACIF,UAAWZ,EAAQZ,OACnB2B,QAAO,sBAAE,sBAAAC,EAAA,sEACCX,IADD,cAELrD,EAAe,IAFV,SAGCc,EAAOqD,aAHR,OAILlB,EAAQgB,KAAK,UAJR,2CAFb,uCAiBZ,mCACI,8BACI,cAAC,IAAD,CAAMxC,GAAI,SAAV,qBAEJ,8BACI,cAAC,IAAD,CAAMA,GAAI,YAAV,2BCrIb,IAAM2C,GAAahE,YAAH,icAmBViE,GAAgBjE,YAAH,ucAmBbkE,GAAgBlE,YAAH,ucAmBbmE,GAAkBnE,YAAH,2cAmBfoE,GAAkBpE,YAAH,mMASfqE,GAAqBrE,YAAH,yMASlBsE,GAAqBtE,YAAH,uJAMlBuE,GAAuBvE,YAAH,2J,oBCjG1B,SAASwE,GAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,KAAMX,EAAW,EAAXA,QAAW,EACtBf,YAAYqB,IAA1BM,EADoC,sBAEbC,mBAAS,IAFI,mBAEpCC,EAFoC,KAE3BC,EAF2B,KAGrCC,EAASC,iBAAO,GAEtB,OACI,qBAAKC,MAAO,CAAEC,UAAW,IAAzB,SACI,cAACC,GAAA,EAAD,UACI,uBACIC,gBAAe,uCAAE,WAAOC,GAAP,SAAAxB,EAAA,yDACbwB,EAAEC,iBAEW,OAATZ,EAHS,gCAIHC,EAAW,CACbY,UAAW,CACPb,OACAG,aAPC,OAWTd,IACAe,EAAW,IACXC,EAAOS,QAAQP,MAAMQ,WAAa,SAbzB,2CAAF,sDADnB,UAkBI,cAACC,GAAA,EAAD,CACIlC,QAAQ,WACRmC,WAAS,EACTC,WAAS,EACT1D,OAAO,SACP2D,YAAY,mBACZC,QAAS,EACTC,MAAOlB,EACPI,MAAO,CAAEe,UAAW,QACpBC,SAAU,SAACZ,GACPN,EAAOS,QAAQP,MAAMQ,WAAcJ,EAAEa,OAAOH,MAAmB,UAAX,SACpDjB,EAAWO,EAAEa,OAAOH,UAG5B,iCACI,cAACpC,EAAA,EAAD,CACIwC,IAAKpB,EACLvB,QAAQ,YACRrB,MAAM,YACNiE,KAAK,UACLnB,MAAO,CAAEQ,WAAY,UALzB,oC,8CC5CXY,GAAWpG,YAAH,kIAMRqG,GAAcrG,YAAH,wIAMXsG,GAActG,YAAH,wIAMXuG,GAAgBvG,YAAH,4IAMbwG,GAAaxG,YAAH,sIAMVyG,GAAgBzG,YAAH,4IAMb0G,GAAgB1G,YAAH,4IAMb2G,GAAkB3G,YAAH,gJ,gFCrCtB2B,GAAYC,YAAW,CACzBgF,KAAM,CACFC,SAAU,KACVC,SAAU,IACV7B,UAAW,MAIZ,SAAS8B,GAAT,GAA+B,IAAfC,EAAc,EAAdA,KAAMvC,EAAQ,EAARA,KACnB7B,EAAUjB,KADiB,EAEGgD,mBAASqC,EAAKC,cAAgBC,KAAWC,MAF5C,mBAE1BC,EAF0B,KAEdC,EAFc,OAGW1C,mBAASqC,EAAKM,OAHzB,mBAG1BC,EAH0B,KAGVC,EAHU,OAIlBzE,YAAYqD,IAApBqB,EAJ0B,sBAKhB1E,YAAYyD,IAAtBkB,EAL0B,oBAOjC,OACI,cAACC,GAAA,EAAD,CAAMX,MAAI,EAACY,IAAE,EAAb,SACI,cAACC,GAAA,EAAD,CAAOC,UAAW,EAAGtE,UAAWZ,EAAQgE,KAAxC,SACI,eAACmB,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CACIhD,MAAO,CAAEiD,SAAU,cACnBC,QAASlB,EAAKvC,KAAKhB,KACnB0E,UAAWnB,EAAKpC,UAEpB,cAACwD,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CACIC,KAAK,QAEL3E,QAAO,sBAAE,sBAAAC,EAAA,yDACDwD,IAAeF,KADd,uBAEDG,EAAcF,MACdK,EAAkBe,SAAShB,GAAkB,GAH5C,SAIKG,EAAO,CAAEpC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MAJlD,qCAMDnB,EAAcH,MACdM,EAAkBe,SAAShB,GAAkB,GAP5C,UAQKE,EAAK,CAAEnC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MARhD,4CAHb,SAeI,cAAC,GAAD,CAAUC,KAAMrB,EAAYsB,KAAMnB,GAAqBP,EAAKwB,KAbvDxB,EAAKwB,aAsBtC,IAAMG,GAAW,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACb,gCACKE,IAAMC,cAAcJ,GACpBC,M,UCtDII,GAAY,SAAC,GAAwC,IAAtCrE,EAAqC,EAArCA,KAAMsE,EAA+B,EAA/BA,QAASlI,EAAsB,EAAtBA,KAAMmI,EAAgB,EAAhBA,UAC7C,OAAID,EAAgB,sCAGhB,8BACI,iCACKlI,EAAKoI,MAAMA,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OAClB,eAAC,IAAMC,SAAP,WACI,cAACC,GAAA,EAAD,UACI,cAACvC,GAAD,CAAMC,KAAMmC,EAAG1E,KAAMA,MAExB5D,EAAKoI,MAAMM,SAAWH,IAAMvI,EAAKoI,MAAMA,MAAMO,OAAS,GACnD,cAAC,KAAD,CACIC,QAAS,WACLT,EAAU,CACN1D,UAAW,CACPb,KAAMA,EACNiF,MAAO,EACPC,OAAQpB,SAAS1H,EAAKoI,MAAMA,MAAMpI,EAAKoI,MAAMA,MAAMO,OAAS,GAAGhB,KAEnEoB,YAAa,SAACC,EAAD,GAA8B,IAAvBC,EAAsB,EAAtBA,gBAChB,OAAKA,EAIE,CACHb,MAAO,CACHc,WAAY,YACZR,QAASO,EAAgBb,MAAMM,QAC/BN,MAAM,GAAD,oBAAMY,EAAGZ,MAAMA,OAAf,aAAyBa,EAAgBb,MAAMA,UAPjDY,UAfnC,UAAwBT,EAAxB,YAA6B3E,EAA7B,YAAqC0E,EAAEX,aCFpD,SAASwB,KAAQ,IAAD,EACOrF,mBAAS,GADhB,mBACZpD,EADY,KACL0I,EADK,KAGfxF,EAAO,KACLhE,EAAQC,GAAOC,UAAU,CAAEC,MAAOb,IAEpCU,GAASA,EAAMS,KACfuD,EAAOhE,EAAMS,GAAGsH,IAGpB,IAAM5H,EAAQE,YAASf,EAAS,CAC5BiB,KAAMP,IAGNG,GAASA,EAAMM,KACfuD,EAAO7D,EAAMM,GAAGsH,IAfD,MAkB2B1H,YAASkD,GAAY,CAC/DsB,UAAW,CACPb,KAAMA,EACNiF,MAAO,EACPC,OAAQ,KAJRZ,EAlBW,EAkBXA,QAASlI,EAlBE,EAkBFA,KAAMmI,EAlBJ,EAkBIA,UAAWlF,EAlBf,EAkBeA,QAQ5BrC,EAAWyI,cAOjB,OANIzI,EAASF,OAASE,EAASF,MAAMuC,UACjCmG,EAAS1I,EAAQ,GACjBb,GAAOyJ,eAAe,CAAEC,QAAS,WACjC3I,EAASF,MAAMuC,SAAU,GAIzB,gCACI,8BACI,cAACnB,GAAD,CAAQvB,OAAK,MAEjB,uBACA,gCACI,cAACoD,GAAD,CAAaC,KAAMA,EAAMX,QAASA,IAClC,cAAC,GAAD,CAAWW,KAAMA,EAAMsE,QAASA,EAASlI,KAAMA,EAAMmI,UAAWA,U,kCC1C1ErH,GAAYC,aAAW,SAACyI,GAAD,MAAY,CACrCC,MAAO,CACHrF,UAAWoF,EAAME,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJ1I,OAAQoI,EAAME,QAAQ,GACtBK,gBAAiBP,EAAMQ,QAAQ1C,UAAU2C,MAE7CC,KAAM,CACFC,MAAO,OACP/F,UAAWoF,EAAME,QAAQ,IAE7BzF,OAAQ,CACJ7C,OAAQoI,EAAME,QAAQ,EAAG,EAAG,QAI7B,SAASU,GAAT,GAA6B,IAAZpI,EAAW,EAAXA,QACdD,EAAUjB,KADe,EAELgD,mBAAS,IAFJ,mBAExBuG,EAFwB,KAEjBC,EAFiB,OAGCxG,mBAAS,IAHV,mBAGxByG,EAHwB,KAGdC,EAHc,OAIftI,YAAY7C,GAArBoL,EAJwB,oBAM/B,OACI,cAACpG,GAAA,EAAD,CAAW3E,UAAU,OAAOsG,SAAS,KAArC,SACI,sBAAKrD,UAAWZ,EAAQ0H,MAAxB,UACI,cAACiB,GAAA,EAAD,CAAQ/H,UAAWZ,EAAQ+H,OAA3B,SACI,cAAC,KAAD,MAEJ,cAACrH,EAAA,EAAD,CAAY/C,UAAU,KAAKgD,QAAQ,KAAKrB,MAAM,cAA9C,qBAGA,uBACIsB,UAAWZ,EAAQmI,KACnBS,YAAU,EACVrG,gBAAe,uCAAE,WAAOC,GAAP,eAAAxB,EAAA,6DACbwB,EAAEC,iBADW,SAEUiG,EAAM,CACzBhG,UAAW,CACP4F,QACAE,YAEJK,OAAQ,SAACC,EAAD,GAAsB,IAAZ7K,EAAW,EAAXA,KACd,IAAKA,EAAK8K,UACN,OAAO,KAEXD,EAAME,WAAW,CACbhL,MAAOb,EACPc,KAAM,CACFK,GAAIL,EAAK8K,UAAUlH,WAdtB,cAEPoH,EAFO,SAoBGA,EAAShL,KAAK8K,WAC1B/L,EAAeiM,EAAShL,KAAK8K,UAAUhM,aArB9B,SAwBPe,GAAOoL,aAxBA,OAyBbjJ,EAAQgB,KAAK,KAzBA,2CAAF,sDAHnB,UA+BI,cAAC4B,GAAA,EAAD,CACIlC,QAAQ,WACRtB,OAAO,SACP8J,UAAQ,EACRpG,WAAS,EACT6C,GAAG,QACHwD,MAAM,gBACNvI,KAAK,QACLwI,aAAa,QACbC,WAAS,EACTlG,SAAU,SAACZ,GACP+F,EAAS/F,EAAEa,OAAOH,UAG1B,cAACL,GAAA,EAAD,CACIlC,QAAQ,WACRtB,OAAO,SACP8J,UAAQ,EACRpG,WAAS,EACTlC,KAAK,WACLuI,MAAM,WACN7F,KAAK,WACLqC,GAAG,WACHyD,aAAa,mBACbjG,SAAU,SAACZ,GACPiG,EAAYjG,EAAEa,OAAOH,UAG7B,cAACpC,EAAA,EAAD,CAAQyC,KAAK,SAASR,WAAS,EAACpC,QAAQ,YAAYrB,MAAM,UAAUsB,UAAWZ,EAAQkC,OAAvF,qBAGA,cAAC6C,GAAA,EAAD,CAAMwE,WAAS,EAAf,SACI,cAACxE,GAAA,EAAD,CAAMX,MAAI,EAAV,SACI,cAAC,IAAD,CAAM3F,GAAI,YAAakC,QAAQ,QAAQyB,MAAO,CAAEoH,eAAgB,QAAhE,SACI,cAAC9I,EAAA,EAAD,CAAYpB,MAAM,gBAAlB,0DC7GzB,SAASmK,GAAanB,GACzB,MAAO,6BAA6BoB,KAAKpB,GCO7C,IAAMvJ,GAAYC,aAAW,SAACyI,GAAD,MAAY,CACrCC,MAAO,CACHrF,UAAWoF,EAAME,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJ1I,OAAQoI,EAAME,QAAQ,GACtBK,gBAAiBP,EAAMQ,QAAQ1C,UAAU2C,MAE7CC,KAAM,CACFC,MAAO,OACP/F,UAAWoF,EAAME,QAAQ,IAE7BzF,OAAQ,CACJ7C,OAAQoI,EAAME,QAAQ,EAAG,EAAG,QAI7B,SAASgC,GAAT,GAAgC,IAAZ1J,EAAW,EAAXA,QACjBD,EAAUjB,KADkB,EAEVgD,mBAAS,IAFC,mBAE3BlB,EAF2B,KAErB+I,EAFqB,OAGR7H,mBAAS,IAHD,mBAG3BuG,EAH2B,KAGpBC,EAHoB,OAIFxG,mBAAS,IAJP,mBAI3ByG,EAJ2B,KAIjBC,EAJiB,OAKftI,YAAY9C,GAAxBwM,EAL2B,oBAOlC,OACI,cAACvH,GAAA,EAAD,CAAW3E,UAAU,OAAOsG,SAAS,KAArC,SACI,sBAAKrD,UAAWZ,EAAQ0H,MAAxB,UACI,cAACiB,GAAA,EAAD,CAAQ/H,UAAWZ,EAAQ+H,OAA3B,SACI,cAAC,KAAD,MAEJ,cAACrH,EAAA,EAAD,CAAY/C,UAAU,KAAKgD,QAAQ,KAAKrB,MAAM,cAA9C,qBAGA,uBACIsB,UAAWZ,EAAQmI,KACnBS,YAAU,EACVrG,gBAAe,uCAAE,WAAOC,GAAP,SAAAxB,EAAA,yDACbwB,EAAEC,kBAEEgH,GAAanB,GAHJ,gCAIHuB,EAAS,CACXnH,UAAW,CACP7B,OACAyH,QACAE,cARC,OAYTvI,EAAQgB,KAAK,KAZJ,2CAAF,sDAHnB,UAmBI,eAAC8D,GAAA,EAAD,CAAMwE,WAAS,EAAC5B,QAAS,EAAzB,UACI,cAAC5C,GAAA,EAAD,CAAMX,MAAI,EAACY,GAAI,GAAf,SACI,cAACnC,GAAA,EAAD,CACIwG,aAAa,OACbxI,KAAK,OACLF,QAAQ,WACRwI,UAAQ,EACRpG,WAAS,EACT6C,GAAG,OACHwD,MAAM,OACNE,WAAS,EACTlG,SAAU,SAACZ,GACPoH,EAAQpH,EAAEa,OAAOH,YAI7B,cAAC6B,GAAA,EAAD,CAAMX,MAAI,EAACY,GAAI,GAAf,SACI,cAACnC,GAAA,EAAD,CACIlC,QAAQ,WACRwI,UAAQ,EACRpG,WAAS,EACT6C,GAAG,QACHwD,MAAM,gBACNvI,KAAK,QACLwI,aAAa,QACbjG,SAAU,SAACZ,GACP+F,EAAS/F,EAAEa,OAAOH,YAI9B,cAAC6B,GAAA,EAAD,CAAMX,MAAI,EAACY,GAAI,GAAf,SACI,cAACnC,GAAA,EAAD,CACIlC,QAAQ,WACRwI,UAAQ,EACRpG,WAAS,EACTlC,KAAK,WACLuI,MAAM,WACN7F,KAAK,WACLqC,GAAG,WACHyD,aAAa,mBACbjG,SAAU,SAACZ,GACPiG,EAAYjG,EAAEa,OAAOH,eAKrC,cAACpC,EAAA,EAAD,CAAQyC,KAAK,SAASR,WAAS,EAACpC,QAAQ,YAAYrB,MAAM,UAAUsB,UAAWZ,EAAQkC,OAAvF,qBAGA,cAAC6C,GAAA,EAAD,CAAMwE,WAAS,EAACO,eAAe,WAA/B,SACI,cAAC/E,GAAA,EAAD,CAAMX,MAAI,EAAV,SACI,cAAC,IAAD,CAAM3F,GAAI,SAAUkC,QAAQ,QAAQyB,MAAO,CAAEoH,eAAgB,QAA7D,SACI,cAAC9I,EAAA,EAAD,CAAYpB,MAAM,gBAAlB,4DC9GzB,SAASyK,GAAT,GAA4C,IAAlBlI,EAAiB,EAAjBA,KAAMX,EAAW,EAAXA,QAAW,EACzBf,YAAYsB,IAA1BK,EADuC,sBAEhBC,mBAAS,IAFO,mBAEvCC,EAFuC,KAE9BC,EAF8B,KAGxCC,EAASC,iBAAO,GAEtB,OACI,qBAAKC,MAAO,CAAEC,UAAW,IAAzB,SACI,cAACC,GAAA,EAAD,UACI,uBACIC,gBAAe,uCAAE,WAAOC,GAAP,SAAAxB,EAAA,yDACbwB,EAAEC,iBAEW,OAATZ,EAHS,gCAIHC,EAAW,CACbY,UAAW,CACPb,OACAG,aAPC,OAWTd,IACAe,EAAW,IACXC,EAAOS,QAAQP,MAAMQ,WAAa,SAbzB,2CAAF,sDADnB,UAkBI,cAACC,GAAA,EAAD,CACIlC,QAAQ,WACRmC,WAAS,EACTC,WAAS,EACT1D,OAAO,SACP2D,YAAY,mBACZC,QAAS,EACTC,MAAOlB,EACPI,MAAO,CAAEe,UAAW,QACpBC,SAAU,SAACZ,GACPN,EAAOS,QAAQP,MAAMQ,WAAcJ,EAAEa,OAAOH,MAAmB,UAAX,SACpDjB,EAAWO,EAAEa,OAAOH,UAG5B,iCACI,cAACpC,EAAA,EAAD,CACIwC,IAAKpB,EACLvB,QAAQ,YACRrB,MAAM,YACNiE,KAAK,UACLnB,MAAO,CAAEQ,WAAY,UALzB,oCCvCxB,IAAM7D,GAAYC,YAAW,CACzBgF,KAAM,CACFC,SAAU,KACVC,SAAU,IACV7B,UAAW,MAIZ,SAAS2H,GAAT,GAAkC,IAAf5F,EAAc,EAAdA,KAAMvC,EAAQ,EAARA,KACtB7B,EAAUjB,KADoB,EAEAgD,mBAASqC,EAAKC,cAAgBC,KAAWC,MAFzC,mBAE7BC,EAF6B,KAEjBC,EAFiB,OAGQ1C,mBAASqC,EAAKM,OAHtB,mBAG7BC,EAH6B,KAGbC,EAHa,OAIrBzE,YAAYsD,IAApBoB,EAJ6B,sBAKnB1E,YAAY0D,IAAtBiB,EAL6B,oBAOpC,OACI,cAACC,GAAA,EAAD,CAAMX,MAAI,EAACY,IAAE,EAAb,SACI,cAACC,GAAA,EAAD,CAAOC,UAAW,EAAGtE,UAAWZ,EAAQgE,KAAxC,SACI,eAACmB,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CACIhD,MAAO,CAAEiD,SAAU,cACnBC,QAASlB,EAAKvC,KAAKhB,KACnB0E,UAAWnB,EAAKpC,UAEpB,cAACwD,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CACIC,KAAK,QAEL3E,QAAO,sBAAE,sBAAAC,EAAA,yDACDwD,IAAeF,KADd,uBAEDG,EAAcF,MACdK,EAAkBe,SAAShB,GAAkB,GAH5C,SAIKG,EAAO,CAAEpC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MAJlD,qCAMDnB,EAAcH,MACdM,EAAkBe,SAAShB,GAAkB,GAP5C,UAQKE,EAAK,CAAEnC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MARhD,4CAHb,SAeI,cAAC,GAAD,CAAUC,KAAMrB,EAAYsB,KAAMnB,GAAqBP,EAAKwB,KAfhE,UAEYxB,EAAKwB,GAFjB,gBAwBxB,IAAMG,GAAW,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACb,gCACKE,IAAMC,cAAcJ,GACpBC,MCtDImE,GAAe,SAAC,GAAwC,IAAtCpI,EAAqC,EAArCA,KAAMsE,EAA+B,EAA/BA,QAASlI,EAAsB,EAAtBA,KAAMmI,EAAgB,EAAhBA,UAChD,OAAID,EAAgB,wBAGhB,8BACI,iCACKlI,EAAKiM,SAAS7D,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OACrB,eAAC,IAAMC,SAAP,WACI,cAACC,GAAA,EAAD,UACI,cAACsD,GAAD,CAAS5F,KAAMmC,EAAG1E,KAAMA,MAE3B5D,EAAKiM,SAASvD,SAAWH,IAAMvI,EAAKiM,SAAS7D,MAAMO,OAAS,GACzD,cAAC,KAAD,CACIC,QAAS,WACLT,EAAU,CACN1D,UAAW,CACPb,KAAMA,EACNiF,MAAO,EACPC,OAAQpB,SAAS1H,EAAKiM,SAAS7D,MAAMpI,EAAKiM,SAAS7D,MAAMO,OAAS,GAAGhB,KAEzEoB,YAAa,SAACC,EAAD,GAA8B,IAAvBC,EAAsB,EAAtBA,gBAChB,OAAKA,EAIE,CACHgD,SAAU,CACN/C,WAAY,YACZR,QAASO,EAAgBgD,SAASvD,QAClCN,MAAM,GAAD,oBAAMY,EAAGiD,SAAS7D,OAAlB,aAA4Ba,EAAgBgD,SAAS7D,UAPvDY,UAfnC,UAAwBT,EAAxB,YAA6B3E,EAA7B,YAAqC0E,EAAEX,GAAvC,eCFb,SAASuE,KAAW,IAAD,EACIpI,mBAAS,GADb,mBACfpD,EADe,KACR0I,EADQ,KAGlBxF,EAAO,KACLhE,EAAQC,GAAOC,UAAU,CAAEC,MAAOb,IAEpCU,GAASA,EAAMS,KACfuD,EAAOhE,EAAMS,GAAGsH,IAGpB,IAAM5H,EAAQE,YAASf,EAAS,CAC5BiB,KAAMP,IAGNG,GAASA,EAAMM,KACfuD,EAAO7D,EAAMM,GAAGsH,IAfE,MAkBwB1H,YAASmD,GAAe,CAClEqB,UAAW,CACPb,KAAMA,EACNiF,MAAO,GACPC,OAAQ,KAJRZ,EAlBc,EAkBdA,QAASlI,EAlBK,EAkBLA,KAAMmI,EAlBD,EAkBCA,UAAWlF,EAlBZ,EAkBYA,QAQ5BrC,EAAWyI,cAOjB,OANIzI,EAASF,OAASE,EAASF,MAAMuC,UACjCmG,EAAS1I,EAAQ,GACjBb,GAAOyJ,eAAe,CAAEC,QAAS,WACjC3I,EAASF,MAAMuC,SAAU,GAIzB,gCACI,8BACI,cAACnB,GAAD,CAAQvB,OAAK,MAEjB,uBACA,gCACI,cAACuL,GAAD,CAAgBlI,KAAMA,EAAMX,QAASA,IACrC,cAAC,GAAD,CAAcW,KAAMA,EAAMsE,QAASA,EAASlI,KAAMA,EAAMmI,UAAWA,UC9C5E,SAASgE,GAAT,GAA4C,IAAlBvI,EAAiB,EAAjBA,KAAMX,EAAW,EAAXA,QAAW,EACzBf,YAAYuB,IAA1BI,EADuC,sBAEhBC,mBAAS,IAFO,mBAEvCC,EAFuC,KAE9BC,EAF8B,KAGxCC,EAASC,iBAAO,GAEtB,OACI,qBAAKC,MAAO,CAAEC,UAAW,IAAzB,SACI,cAACC,GAAA,EAAD,UACI,uBACIC,gBAAe,uCAAE,WAAOC,GAAP,SAAAxB,EAAA,yDACbwB,EAAEC,iBAEW,OAATZ,EAHS,gCAIHC,EAAW,CACbY,UAAW,CACPb,OACAG,aAPC,OAWTd,IACAe,EAAW,IACXC,EAAOS,QAAQP,MAAMQ,WAAa,SAbzB,2CAAF,sDADnB,UAkBI,cAACC,GAAA,EAAD,CACIlC,QAAQ,WACRmC,WAAS,EACTC,WAAS,EACT1D,OAAO,SACP2D,YAAY,mBACZC,QAAS,EACTC,MAAOlB,EACPI,MAAO,CAAEe,UAAW,QACpBC,SAAU,SAACZ,GACPN,EAAOS,QAAQP,MAAMQ,WAAcJ,EAAEa,OAAOH,MAAmB,UAAX,SACpDjB,EAAWO,EAAEa,OAAOH,UAG5B,iCACI,cAACpC,EAAA,EAAD,CACIwC,IAAKpB,EACLvB,QAAQ,YACRrB,MAAM,YACNiE,KAAK,UACLnB,MAAO,CAAEQ,WAAY,UALzB,oCCvCxB,IAAM7D,GAAYC,YAAW,CACzBgF,KAAM,CACFC,SAAU,KACVC,SAAU,IACV7B,UAAW,MAIZ,SAASgI,GAAT,GAAkC,IAAfjG,EAAc,EAAdA,KAAMvC,EAAQ,EAARA,KACtB7B,EAAUjB,KADoB,EAEAgD,mBAASqC,EAAKC,cAAgBC,KAAWC,MAFzC,mBAE7BC,EAF6B,KAEjBC,EAFiB,OAGQ1C,mBAASqC,EAAKM,OAHtB,mBAG7BC,EAH6B,KAGbC,EAHa,OAIrBzE,YAAYuD,IAApBmB,EAJ6B,sBAKnB1E,YAAY2D,IAAtBgB,EAL6B,oBAOpC,OACI,cAACC,GAAA,EAAD,CAAMX,MAAI,EAACY,IAAE,EAAb,SACI,cAACC,GAAA,EAAD,CAAOC,UAAW,EAAGtE,UAAWZ,EAAQgE,KAAxC,SACI,eAACmB,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CACIhD,MAAO,CAAEiD,SAAU,cACnBC,QAASlB,EAAKvC,KAAKhB,KACnB0E,UAAWnB,EAAKpC,UAEpB,cAACwD,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CACIC,KAAK,QAEL3E,QAAO,sBAAE,sBAAAC,EAAA,yDACDwD,IAAeF,KADd,uBAEDG,EAAcF,MACdK,EAAkBe,SAAShB,GAAkB,GAH5C,SAIKG,EAAO,CAAEpC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MAJlD,qCAMDnB,EAAcH,MACdM,EAAkBe,SAAShB,GAAkB,GAP5C,UAQKE,EAAK,CAAEnC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MARhD,4CAHb,SAeI,cAAC,GAAD,CAAUC,KAAMrB,EAAYsB,KAAMnB,GAAqBP,EAAKwB,KAfhE,UAEYxB,EAAKwB,GAFjB,gBAwBxB,IAAMG,GAAW,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACb,gCACKE,IAAMC,cAAcJ,GACpBC,MCtDIwE,GAAe,SAAC,GAAwC,IAAtCzI,EAAqC,EAArCA,KAAMsE,EAA+B,EAA/BA,QAASlI,EAAsB,EAAtBA,KAAMmI,EAAgB,EAAhBA,UAChD,OAAID,EAAgB,wBAGhB,8BACI,iCACKlI,EAAKsM,SAASlE,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OACrB,eAAC,IAAMC,SAAP,WACI,cAACC,GAAA,EAAD,UACI,cAAC2D,GAAD,CAASjG,KAAMmC,EAAG1E,KAAMA,MAE3B5D,EAAKsM,SAAS5D,SAAWH,IAAMvI,EAAKsM,SAASlE,MAAMO,OAAS,GACzD,cAAC,KAAD,CACIC,QAAS,WACLT,EAAU,CACN1D,UAAW,CACPb,KAAMA,EACNiF,MAAO,EACPC,OAAQpB,SAAS1H,EAAKsM,SAASlE,MAAMpI,EAAKsM,SAASlE,MAAMO,OAAS,GAAGhB,KAEzEoB,YAAa,SAACC,EAAD,GAA8B,IAAvBC,EAAsB,EAAtBA,gBAChB,OAAKA,EAIE,CACHqD,SAAU,CACNpD,WAAY,YACZR,QAASO,EAAgBqD,SAAS5D,QAClCN,MAAM,GAAD,oBAAMY,EAAGsD,SAASlE,OAAlB,aAA4Ba,EAAgBqD,SAASlE,UAPvDY,UAfnC,UAAwBT,EAAxB,YAA6B3E,EAA7B,YAAqC0E,EAAEX,GAAvC,eCFb,SAAS4E,KAAW,IAAD,EACIzI,mBAAS,GADb,mBACfpD,EADe,KACR0I,EADQ,KAGlBxF,EAAO,KACLhE,EAAQC,GAAOC,UAAU,CAAEC,MAAOb,IAEpCU,GAASA,EAAMS,KACfuD,EAAOhE,EAAMS,GAAGsH,IAGpB,IAAM5H,EAAQE,YAASf,EAAS,CAC5BiB,KAAMP,IAGNG,GAASA,EAAMM,KACfuD,EAAO7D,EAAMM,GAAGsH,IAfE,MAkBwB1H,YAASoD,GAAe,CAClEoB,UAAW,CACPb,KAAMA,EACNiF,MAAO,GACPC,OAAQ,KAJRZ,EAlBc,EAkBdA,QAASlI,EAlBK,EAkBLA,KAAMmI,EAlBD,EAkBCA,UAAWlF,EAlBZ,EAkBYA,QAQ5BrC,EAAWyI,cAOjB,OANIzI,EAASF,OAASE,EAASF,MAAMuC,UACjCmG,EAAS1I,EAAQ,GACjBb,GAAOyJ,eAAe,CAAEC,QAAS,WACjC3I,EAASF,MAAMuC,SAAU,GAIzB,gCACI,8BACI,cAACnB,GAAD,CAAQvB,OAAK,MAEjB,uBACA,gCACI,cAAC4L,GAAD,CAAgBvI,KAAMA,EAAMX,QAASA,IACrC,cAAC,GAAD,CAAcW,KAAMA,EAAMsE,QAASA,EAASlI,KAAMA,EAAMmI,UAAWA,UC9C5E,SAASqE,GAAT,GAA8C,IAAlB5I,EAAiB,EAAjBA,KAAMX,EAAW,EAAXA,QAAW,EAC3Bf,YAAYwB,IAA1BG,EADyC,sBAElBC,mBAAS,IAFS,mBAEzCC,EAFyC,KAEhCC,EAFgC,KAG1CC,EAASC,iBAAO,GAEtB,OACI,qBAAKC,MAAO,CAAEC,UAAW,IAAzB,SACI,cAACC,GAAA,EAAD,UACI,uBACIC,gBAAe,uCAAE,WAAOC,GAAP,SAAAxB,EAAA,yDACbwB,EAAEC,iBAEW,OAATZ,EAHS,gCAIHC,EAAW,CACbY,UAAW,CACPb,OACAG,aAPC,OAWTd,IACAe,EAAW,IACXC,EAAOS,QAAQP,MAAMQ,WAAa,SAbzB,2CAAF,sDADnB,UAkBI,cAACC,GAAA,EAAD,CACIlC,QAAQ,WACRmC,WAAS,EACTC,WAAS,EACT1D,OAAO,SACP2D,YAAY,mBACZC,QAAS,EACTC,MAAOlB,EACPI,MAAO,CAAEe,UAAW,QACpBC,SAAU,SAACZ,GACPN,EAAOS,QAAQP,MAAMQ,WAAcJ,EAAEa,OAAOH,MAAmB,UAAX,SACpDjB,EAAWO,EAAEa,OAAOH,UAG5B,iCACI,cAACpC,EAAA,EAAD,CACIwC,IAAKpB,EACLvB,QAAQ,YACRrB,MAAM,YACNiE,KAAK,UACLnB,MAAO,CAAEQ,WAAY,UALzB,oCCvCxB,IAAM7D,GAAYC,YAAW,CACzBgF,KAAM,CACFC,SAAU,KACVC,SAAU,IACV7B,UAAW,MAIZ,SAASqI,GAAT,GAAoC,IAAftG,EAAc,EAAdA,KAAMvC,EAAQ,EAARA,KACxB7B,EAAUjB,KADsB,EAEFgD,mBAASqC,EAAKC,cAAgBC,KAAWC,MAFvC,mBAE/BC,EAF+B,KAEnBC,EAFmB,OAGM1C,mBAASqC,EAAKM,OAHpB,mBAG/BC,EAH+B,KAGfC,EAHe,OAIvBzE,YAAYwD,IAApBkB,EAJ+B,sBAKrB1E,YAAY4D,IAAtBe,EAL+B,oBAOtC,OACI,cAACC,GAAA,EAAD,CAAMX,MAAI,EAACY,IAAE,EAAb,SACI,cAACC,GAAA,EAAD,CAAOC,UAAW,EAAGtE,UAAWZ,EAAQgE,KAAxC,SACI,eAACmB,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CACIhD,MAAO,CAAEiD,SAAU,cACnBC,QAASlB,EAAKvC,KAAKhB,KACnB0E,UAAWnB,EAAKpC,UAEpB,cAACwD,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CACIC,KAAK,QAEL3E,QAAO,sBAAE,sBAAAC,EAAA,yDACDwD,IAAeF,KADd,uBAEDG,EAAcF,MACdK,EAAkBe,SAAShB,GAAkB,GAH5C,SAIKG,EAAO,CAAEpC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MAJlD,qCAMDnB,EAAcH,MACdM,EAAkBe,SAAShB,GAAkB,GAP5C,UAQKE,EAAK,CAAEnC,UAAW,CAAEb,KAAMA,EAAMmC,KAAMI,EAAKwB,MARhD,4CAHb,SAeI,cAAC,GAAD,CAAUC,KAAMrB,EAAYsB,KAAMnB,GAAqBP,EAAKwB,KAfhE,UAEYxB,EAAKwB,GAFjB,gBAwBxB,IAAMG,GAAW,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACb,gCACKE,IAAMC,cAAcJ,GACpBC,MCtDI6E,GAAiB,SAAC,GAAwC,IAAtC9I,EAAqC,EAArCA,KAAMsE,EAA+B,EAA/BA,QAASlI,EAAsB,EAAtBA,KAAMmI,EAAgB,EAAhBA,UAClD,OAAID,EAAgB,wBAGhB,8BACI,iCACKlI,EAAK2M,WAAWvE,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OACvB,eAAC,IAAMC,SAAP,WACI,cAACC,GAAA,EAAD,UACI,cAACgE,GAAD,CAAWtG,KAAMmC,EAAG1E,KAAMA,MAE7B5D,EAAK2M,WAAWjE,SAAWH,IAAMvI,EAAK2M,WAAWvE,MAAMO,OAAS,GAC7D,cAAC,KAAD,CACIC,QAAS,WACLT,EAAU,CACN1D,UAAW,CACPb,KAAMA,EACNiF,MAAO,EACPC,OAAQpB,SACJ1H,EAAK2M,WAAWvE,MAAMpI,EAAK2M,WAAWvE,MAAMO,OAAS,GAAGhB,KAGhEoB,YAAa,SAACC,EAAD,GAA8B,IAAvBC,EAAsB,EAAtBA,gBAChB,OAAKA,EAIE,CACH0D,WAAY,CACRzD,WAAY,YACZR,QAASO,EAAgB0D,WAAWjE,QACpCN,MAAM,GAAD,oBACEY,EAAG2D,WAAWvE,OADhB,aAEEa,EAAgB0D,WAAWvE,UAT/BY,UAjBnC,UAAwBT,EAAxB,YAA6B3E,EAA7B,YAAqC0E,EAAEX,GAAvC,eCFb,SAASiF,KAAa,IAAD,EACE9I,mBAAS,GADX,mBACjBpD,EADiB,KACV0I,EADU,KAGpBxF,EAAO,KACLhE,EAAQC,GAAOC,UAAU,CAAEC,MAAOb,IAEpCU,GAASA,EAAMS,KACfuD,EAAOhE,EAAMS,GAAGsH,IAGpB,IAAM5H,EAAQE,YAASf,EAAS,CAC5BiB,KAAMP,IAGNG,GAASA,EAAMM,KACfuD,EAAO7D,EAAMM,GAAGsH,IAfI,MAkBsB1H,YAASqD,GAAiB,CACpEmB,UAAW,CACPb,KAAMA,EACNiF,MAAO,GACPC,OAAQ,KAJRZ,EAlBgB,EAkBhBA,QAASlI,EAlBO,EAkBPA,KAAMmI,EAlBC,EAkBDA,UAAWlF,EAlBV,EAkBUA,QAQ5BrC,EAAWyI,cAOjB,OANIzI,EAASF,OAASE,EAASF,MAAMuC,UACjCmG,EAAS1I,EAAQ,GACjBb,GAAOyJ,eAAe,CAAEC,QAAS,WACjC3I,EAASF,MAAMuC,SAAU,GAIzB,gCACI,8BACI,cAACnB,GAAD,CAAQvB,OAAK,MAEjB,uBACA,gCACI,cAACiM,GAAD,CAAkB5I,KAAMA,EAAMX,QAASA,IACvC,cAAC,GAAD,CAAgBW,KAAMA,EAAMsE,QAASA,EAASlI,KAAMA,EAAMmI,UAAWA,UCzC9E,SAAS0E,KACZ,OACI,cAAC,IAAD,UACI,8BACI,eAAC,IAAD,WACI,cAAC,EAAD,CAAWC,OAAK,EAACC,KAAK,IAAIrN,UAAWyJ,KACrC,cAAC,EAAD,CAAW2D,OAAK,EAACC,KAAK,SAASrN,UAAWwM,KAC1C,cAAC,EAAD,CAAWY,OAAK,EAACC,KAAK,SAASrN,UAAW6M,KAC1C,cAAC,EAAD,CAAWO,OAAK,EAACC,KAAK,SAASrN,UAAWkN,KAC1C,cAAC,EAAD,CAAaE,OAAK,EAACC,KAAK,SAASrN,UAAW0K,KAC5C,cAAC,EAAD,CAAa0C,OAAK,EAACC,KAAK,YAAYrN,UAAWgM,Y,cClBtDsB,GAAYC,aAAY,CACjCjD,QAAS,CACL1E,KAAM,UCgCC4H,OA5BR,WAAgB,IAAD,EACYpJ,oBAAS,GADrB,mBACXoE,EADW,KACFiF,EADE,KAclB,OAXAC,qBAAU,WACNC,MAAM,QAAS,CACXC,OAAQ,OACRC,YAAa,YACdC,KAHH,uCAGQ,WAAOxN,GAAP,eAAA+C,EAAA,sEAC0B/C,EAAKyN,OAD/B,gBAEJ1O,EAFI,EACID,aAERqO,GAAW,GAHP,2CAHR,yDAQD,IAECjF,EACO,sCAIP,cAACwF,EAAA,EAAD,CAAelE,MAAOwD,GAAtB,SACI,sBAAKrK,UAAU,MAAf,UACI,cAACgL,EAAA,EAAD,IACA,cAACd,GAAD,U,qEC1BHe,GAAW,IAAIC,KAAS,CACjCC,IAAK,WACLP,YAAa,YAGJQ,GAAW,IAAIC,MAAW,SAACC,EAAWC,GAC/C,IAAMpP,EAAcG,IAQpB,OAPAgP,EAAUE,YAAW,oBAAGC,eAAH,MAAa,GAAb,QAAuB,CACxCA,QAAQ,2BACDA,GADA,IAEHC,cAAevP,EAAW,iBAAaA,GAAgB,SAIxDoP,EAAQD,MAGNK,GAAmB,IAAIC,KAAiB,CACjDC,iBAAkB,cAClBC,wBAAyB,kB7BXtB,WACH,IAAM3P,EAAcG,IAEpB,IAAKH,EACD,OAAO,EAGX,IAAK,IACO4P,EAAQC,YAAU7P,GAAlB4P,IACR,OAAOE,KAAKC,MAAc,IAANH,EACtB,SACE,OAAO,G6BAoBI,IAC/BC,iBAAkB,WACd,OAAO1B,MAAM,QAAS,CAClBC,OAAQ,OACRC,YAAa,aAGrByB,YAAa,SAAClQ,GACVC,EAAeD,MCvBVe,GAAS,IAAIoP,KAAa,CACnCrP,MAAO,IAAIsP,KAAc,CACrBC,aAAc,CACV/G,MAAO,CACHgH,UAAW,CAAC,KAAM,sBAI9B7B,YAAa,UACb8B,KAAM1O,aAAK,CAAC2N,GAAkBP,GAAUH,OAG5C0B,IAAShP,OACL,cAAC,IAAMiP,WAAP,UACI,cAACC,GAAA,EAAD,CAAgB3P,OAAQA,GAAxB,SACI,cAAC,GAAD,QAGR4P,SAASC,eAAe,W","file":"static/js/main.e6a32005.chunk.js","sourcesContent":["import jwtDecode from 'jwt-decode';\r\n\r\nlet accessToken = '';\r\n\r\nexport function setAccessToken(token) {\r\n    accessToken = token;\r\n}\r\n\r\nexport function getAccessToken() {\r\n    return accessToken;\r\n}\r\n\r\nexport function isAccessTokenValid() {\r\n    const accessToken = getAccessToken();\r\n\r\n    if (!accessToken) {\r\n        return true;\r\n    }\r\n\r\n    try {\r\n        const { exp } = jwtDecode(accessToken);\r\n        return Date.now() < exp * 1000;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const meQuery = gql`\r\n    {\r\n        me {\r\n            id\r\n            name\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const usersQuery = gql`\r\n    {\r\n        users {\r\n            id\r\n            name\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const createUserMutation = gql`\r\n    mutation createUser($name: String!, $email: String!, $password: String!) {\r\n        createUser(user: { name: $name, email: $email, password: $password }) {\r\n            id\r\n            name\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const loginUserMutation = gql`\r\n    mutation loginUser($email: String!, $password: String!) {\r\n        loginUser(email: $email, password: $password) {\r\n            accessToken\r\n            user {\r\n                id\r\n                name\r\n                email\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const logoutUserMutation = gql`\r\n    mutation {\r\n        logoutUser\r\n    }\r\n`;\r\n\r\nexport const fullLogoutUserMutation = gql`\r\n    mutation {\r\n        fullLogoutUser\r\n    }\r\n`;\r\n","import { useQuery } from '@apollo/react-hooks';\r\nimport React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { client } from '..';\r\nimport { meQuery } from '../graphql/user';\r\n\r\nexport const UserRoute = ({ component: Component, ...rest }) => {\r\n    const cache = client.readQuery({ query: meQuery });\r\n\r\n    const { data } = useQuery(meQuery, {\r\n        fetchPolicy: 'network-only',\r\n        skip: cache,\r\n    });\r\n\r\n    let isUser = false;\r\n\r\n    if ((cache && cache.me) || (data && data.me)) {\r\n        isUser = true;\r\n    }\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) =>\r\n                isUser ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: '/login',\r\n                            state: { from: props.location },\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { client } from '..';\r\nimport { meQuery } from '../graphql/user';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nexport const PublicRoute = ({ component: Component, ...rest }) => {\r\n    const cache = client.readQuery({ query: meQuery });\r\n\r\n    const { data } = useQuery(meQuery, {\r\n        fetchPolicy: 'network-only',\r\n        skip: cache,\r\n    });\r\n\r\n    let isUser = false;\r\n\r\n    if ((cache && cache.me) || (data && data.me)) {\r\n        isUser = true;\r\n    }\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) =>\r\n                !isUser ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: '/',\r\n                            state: { from: props.location },\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n","import { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport { AppBar, Button, makeStyles, Toolbar, Typography } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { fullLogoutUserMutation, logoutUserMutation, meQuery } from '../graphql/user';\r\nimport { setAccessToken } from '../utils/token';\r\nimport { useScrollTrigger, Slide } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    button: {\r\n        margin: 5,\r\n        color: 'inherit',\r\n    },\r\n}));\r\n\r\nfunction HideOnScroll(props) {\r\n    const { children } = props;\r\n    const trigger = useScrollTrigger();\r\n\r\n    return (\r\n        <Slide appear={false} direction=\"down\" in={!trigger}>\r\n            {children}\r\n        </Slide>\r\n    );\r\n}\r\n\r\nexport function Header(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [logout, { client }] = useMutation(logoutUserMutation);\r\n    const [fullLogout] = useMutation(fullLogoutUserMutation);\r\n\r\n    const cache = client.readQuery({ query: meQuery });\r\n\r\n    const { data } = useQuery(meQuery, {\r\n        fetchPolicy: 'network-only',\r\n        skip: cache,\r\n    });\r\n\r\n    let isUser = false;\r\n\r\n    if ((cache && cache.me) || (data && data.me)) {\r\n        isUser = true;\r\n    }\r\n\r\n    if (isUser) {\r\n        return (\r\n            <HideOnScroll {...props} block=\"true\">\r\n                <AppBar position=\"fixed\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h5\" className={classes.title}>\r\n                            Hello, {cache.me.name}!\r\n                        </Typography>\r\n                        <Button\r\n                            className={classes.button}\r\n                            onClick={async () => {\r\n                                history.push({\r\n                                    pathname: '/',\r\n                                    state: { refetch: true },\r\n                                });\r\n                            }}\r\n                        >\r\n                            Home\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            onClick={async () => {\r\n                                history.push({\r\n                                    pathname: '/cqrs1',\r\n                                    state: { refetch: true },\r\n                                });\r\n                            }}\r\n                        >\r\n                            CQRS 1\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            onClick={async () => {\r\n                                history.push({\r\n                                    pathname: '/cqrs2',\r\n                                    state: { refetch: true },\r\n                                });\r\n                            }}\r\n                        >\r\n                            CQRS 2\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            onClick={async () => {\r\n                                history.push({\r\n                                    pathname: '/cqrs3',\r\n                                    state: { refetch: true },\r\n                                });\r\n                            }}\r\n                        >\r\n                            CQRS 3\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            onClick={async () => {\r\n                                await logout();\r\n                                setAccessToken('');\r\n                                await client.resetStore();\r\n                                history.push('/login');\r\n                            }}\r\n                        >\r\n                            Logout\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            onClick={async () => {\r\n                                await fullLogout();\r\n                                setAccessToken('');\r\n                                await client.resetStore();\r\n                                history.push('/login');\r\n                            }}\r\n                        >\r\n                            Logout everywhere\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </HideOnScroll>\r\n        );\r\n    } else {\r\n        return (\r\n            <header>\r\n                <div>\r\n                    <Link to={'/login'}>login</Link>\r\n                </div>\r\n                <div>\r\n                    <Link to={'/register'}>register</Link>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const postsQuery = gql`\r\n    query posts($user: ID!, $limit: Int!, $cursor: Int!) {\r\n        posts(user: $user, limit: $limit, cursor: $cursor) {\r\n            hasMore\r\n            posts {\r\n                id\r\n                content\r\n                likes\r\n                userRequesting\r\n                isLikedByUser\r\n                user {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const postsOneQuery = gql`\r\n    query postsOne($user: ID!, $limit: Int!, $cursor: Int!) {\r\n        postsOne(user: $user, limit: $limit, cursor: $cursor) {\r\n            hasMore\r\n            posts {\r\n                id\r\n                content\r\n                likes\r\n                userRequesting\r\n                isLikedByUser\r\n                user {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const postsTwoQuery = gql`\r\n    query postsTwo($user: ID!, $limit: Int!, $cursor: Int!) {\r\n        postsTwo(user: $user, limit: $limit, cursor: $cursor) {\r\n            hasMore\r\n            posts {\r\n                id\r\n                content\r\n                likes\r\n                userRequesting\r\n                isLikedByUser\r\n                user {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const postsThreeQuery = gql`\r\n    query postsThree($user: ID!, $limit: Int!, $cursor: Int!) {\r\n        postsThree(user: $user, limit: $limit, cursor: $cursor) {\r\n            hasMore\r\n            posts {\r\n                id\r\n                content\r\n                likes\r\n                userRequesting\r\n                isLikedByUser\r\n                user {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const createPostQuery = gql`\r\n    mutation createPost($user: ID!, $content: String!) {\r\n        createPost(user: $user, content: $content) {\r\n            id\r\n            content\r\n        }\r\n    }\r\n`;\r\n\r\nexport const createPostOneQuery = gql`\r\n    mutation createPostOne($user: ID!, $content: String!) {\r\n        createPostOne(user: $user, content: $content) {\r\n            id\r\n            content\r\n        }\r\n    }\r\n`;\r\n\r\nexport const createPostTwoQuery = gql`\r\n    mutation createPostTwo($user: ID!, $content: String!) {\r\n        createPostTwo(user: $user, content: $content)\r\n    }\r\n`;\r\n\r\nexport const createPostThreeQuery = gql`\r\n    mutation createPostThree($user: ID!, $content: String!) {\r\n        createPostThree(user: $user, content: $content)\r\n    }\r\n`;\r\n","import { useMutation } from '@apollo/client';\r\nimport { useRef, useState } from 'react';\r\nimport { createPostQuery } from '../graphql/post';\r\nimport { TextField, Button, Container } from '@material-ui/core';\r\n\r\nexport function PostCreator({ user, refetch }) {\r\n    const [createPost] = useMutation(createPostQuery);\r\n    const [content, setContent] = useState('');\r\n    const submit = useRef(0);\r\n\r\n    return (\r\n        <div style={{ marginTop: 50 }}>\r\n            <Container>\r\n                <form\r\n                    onSubmitCapture={async (e) => {\r\n                        e.preventDefault();\r\n\r\n                        if (user !== null) {\r\n                            await createPost({\r\n                                variables: {\r\n                                    user,\r\n                                    content,\r\n                                },\r\n                            });\r\n\r\n                            refetch();\r\n                            setContent('');\r\n                            submit.current.style.visibility = 'hidden';\r\n                        }\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        multiline\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        placeholder=\"Create your post\"\r\n                        minRows={4}\r\n                        value={content}\r\n                        style={{ textAlign: 'left' }}\r\n                        onChange={(e) => {\r\n                            submit.current.style.visibility = !e.target.value ? 'hidden' : 'visible';\r\n                            setContent(e.target.value);\r\n                        }}\r\n                    />\r\n                    <center>\r\n                        <Button\r\n                            ref={submit}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            type=\"primary\"\r\n                            style={{ visibility: 'hidden' }}\r\n                        >\r\n                            create a post\r\n                        </Button>\r\n                    </center>\r\n                </form>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const likePost = gql`\r\n    mutation likePost($user: ID!, $post: ID!) {\r\n        likePost(user: $user, post: $post)\r\n    }\r\n`;\r\n\r\nexport const likePostOne = gql`\r\n    mutation likePostOne($user: ID!, $post: ID!) {\r\n        likePostOne(user: $user, post: $post)\r\n    }\r\n`;\r\n\r\nexport const likePostTwo = gql`\r\n    mutation likePostTwo($user: ID!, $post: ID!) {\r\n        likePostTwo(user: $user, post: $post)\r\n    }\r\n`;\r\n\r\nexport const likePostThree = gql`\r\n    mutation likePostThree($user: ID!, $post: ID!) {\r\n        likePostThree(user: $user, post: $post)\r\n    }\r\n`;\r\n\r\nexport const unlikePost = gql`\r\n    mutation unlikePost($user: ID!, $post: ID!) {\r\n        unlikePost(user: $user, post: $post)\r\n    }\r\n`;\r\n\r\nexport const unlikePostOne = gql`\r\n    mutation unlikePostOne($user: ID!, $post: ID!) {\r\n        unlikePostOne(user: $user, post: $post)\r\n    }\r\n`;\r\n\r\nexport const unlikePostTwo = gql`\r\n    mutation unlikePostTwo($user: ID!, $post: ID!) {\r\n        unlikePostTwo(user: $user, post: $post)\r\n    }\r\n`;\r\n\r\nexport const unlikePostThree = gql`\r\n    mutation unlikePostThree($user: ID!, $post: ID!) {\r\n        unlikePostThree(user: $user, post: $post)\r\n    }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { likePost, unlikePost } from '../graphql/like';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, IconButton, Grid, ListItem, ListItemText, ListItemIcon } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles({\r\n    post: {\r\n        maxWidth: 1250,\r\n        minWidth: 100,\r\n        marginTop: 15,\r\n    },\r\n});\r\n\r\nexport function Post({ item, user }) {\r\n    const classes = useStyles();\r\n    const [likeButton, setLikeButton] = useState(item.isLikedByUser ? Favorite : FavoriteBorder);\r\n    const [likeButtonText, setLikeButtonText] = useState(item.likes);\r\n    const [like] = useMutation(likePost);\r\n    const [unlike] = useMutation(unlikePost);\r\n\r\n    return (\r\n        <Grid item xs>\r\n            <Paper elevation={3} className={classes.post}>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        style={{ wordWrap: 'break-word' }}\r\n                        primary={item.user.name}\r\n                        secondary={item.content}\r\n                    />\r\n                    <ListItemIcon>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            key={item.id}\r\n                            onClick={async () => {\r\n                                if (likeButton === Favorite) {\r\n                                    setLikeButton(FavoriteBorder);\r\n                                    setLikeButtonText(parseInt(likeButtonText) - 1);\r\n                                    await unlike({ variables: { user: user, post: item.id } });\r\n                                } else {\r\n                                    setLikeButton(Favorite);\r\n                                    setLikeButtonText(parseInt(likeButtonText) + 1);\r\n                                    await like({ variables: { user: user, post: item.id } });\r\n                                }\r\n                            }}\r\n                        >\r\n                            <IconText icon={likeButton} text={likeButtonText} key={item.id} />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                </ListItem>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nconst IconText = ({ icon, text }) => (\r\n    <div>\r\n        {React.createElement(icon)}\r\n        {text}\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Waypoint } from 'react-waypoint';\r\nimport { Post } from './Post';\r\nimport { List } from '@material-ui/core';\r\n\r\nexport const PostsData = ({ user, loading, data, fetchMore }) => {\r\n    if (loading) return <div>...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                {data.posts.posts.map((x, i) => (\r\n                    <React.Fragment key={`${i}-${user}-${x.id}`}>\r\n                        <List>\r\n                            <Post item={x} user={user} />\r\n                        </List>\r\n                        {data.posts.hasMore && i === data.posts.posts.length - 5 && (\r\n                            <Waypoint\r\n                                onEnter={() => {\r\n                                    fetchMore({\r\n                                        variables: {\r\n                                            user: user,\r\n                                            limit: 5,\r\n                                            cursor: parseInt(data.posts.posts[data.posts.posts.length - 1].id),\r\n                                        },\r\n                                        updateQuery: (pv, { fetchMoreResult }) => {\r\n                                            if (!fetchMoreResult) {\r\n                                                return pv;\r\n                                            }\r\n\r\n                                            return {\r\n                                                posts: {\r\n                                                    __typename: 'PostsType',\r\n                                                    hasMore: fetchMoreResult.posts.hasMore,\r\n                                                    posts: [...pv.posts.posts, ...fetchMoreResult.posts.posts],\r\n                                                },\r\n                                            };\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </React.Fragment>\r\n                ))}\r\n            </center>\r\n        </div>\r\n    );\r\n};\r\n","import { useQuery } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { client } from '..';\r\nimport { Header } from '../components/Header';\r\nimport { PostCreator } from '../components/PostCreator';\r\nimport { PostsData } from '../components/PostsData';\r\nimport { postsQuery } from '../graphql/post';\r\nimport { meQuery } from '../graphql/user';\r\n\r\nexport function Home() {\r\n    const [state, setState] = useState(0);\r\n\r\n    let user = null;\r\n    const cache = client.readQuery({ query: meQuery });\r\n\r\n    if (cache && cache.me) {\r\n        user = cache.me.id;\r\n    }\r\n\r\n    const query = useQuery(meQuery, {\r\n        skip: cache,\r\n    });\r\n\r\n    if (query && query.me) {\r\n        user = query.me.id;\r\n    }\r\n\r\n    const { loading, data, fetchMore, refetch } = useQuery(postsQuery, {\r\n        variables: {\r\n            user: user,\r\n            limit: 5,\r\n            cursor: 0,\r\n        },\r\n    });\r\n\r\n    const location = useLocation();\r\n    if (location.state && location.state.refetch) {\r\n        setState(state + 1);\r\n        client.refetchQueries({ include: 'active' });\r\n        location.state.refetch = false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Header props />\r\n            </div>\r\n            <br />\r\n            <div>\r\n                <PostCreator user={user} refetch={refetch} />\r\n                <PostsData user={user} loading={loading} data={data} fetchMore={fetchMore} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useMutation } from '@apollo/react-hooks';\r\nimport React, { useState } from 'react';\r\nimport { client } from '..';\r\nimport { loginUserMutation, meQuery } from '../graphql/user';\r\nimport { setAccessToken } from '../utils/token';\r\nimport { Avatar, Container, Grid, makeStyles, TextField, Typography, Button } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport function Login({ history }) {\r\n    const classes = useStyles();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [login] = useMutation(loginUserMutation);\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"textPrimary\">\r\n                    Sign in\r\n                </Typography>\r\n                <form\r\n                    className={classes.form}\r\n                    noValidate\r\n                    onSubmitCapture={async (e) => {\r\n                        e.preventDefault();\r\n                        const response = await login({\r\n                            variables: {\r\n                                email,\r\n                                password,\r\n                            },\r\n                            update: (store, { data }) => {\r\n                                if (!data.loginUser) {\r\n                                    return null;\r\n                                }\r\n                                store.writeQuery({\r\n                                    query: meQuery,\r\n                                    data: {\r\n                                        me: data.loginUser.user,\r\n                                    },\r\n                                });\r\n                            },\r\n                        });\r\n\r\n                        if (response && response.data.loginUser) {\r\n                            setAccessToken(response.data.loginUser.accessToken);\r\n                        }\r\n\r\n                        await client.clearStore();\r\n                        history.push('/');\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        onChange={(e) => {\r\n                            setEmail(e.target.value);\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        onChange={(e) => {\r\n                            setPassword(e.target.value);\r\n                        }}\r\n                    />\r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item>\r\n                            <Link to={'/register'} variant=\"body2\" style={{ textDecoration: 'none' }}>\r\n                                <Typography color=\"textSecondary\">Don't have an account? Sign Up</Typography>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n","export function isEmailValid(email) {\r\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n}\r\n","import { useMutation } from '@apollo/react-hooks';\r\nimport React, { useState } from 'react';\r\nimport { createUserMutation } from '../graphql/user';\r\nimport { isEmailValid } from '../utils/email';\r\nimport { Avatar, Container, Grid, makeStyles, TextField, Typography, Button } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport function Register({ history }) {\r\n    const classes = useStyles();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [register] = useMutation(createUserMutation);\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\" color=\"textPrimary\">\r\n                    Sign up\r\n                </Typography>\r\n                <form\r\n                    className={classes.form}\r\n                    noValidate\r\n                    onSubmitCapture={async (e) => {\r\n                        e.preventDefault();\r\n\r\n                        if (isEmailValid(email)) {\r\n                            await register({\r\n                                variables: {\r\n                                    name,\r\n                                    email,\r\n                                    password,\r\n                                },\r\n                            });\r\n\r\n                            history.push('/');\r\n                        }\r\n                    }}\r\n                >\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoComplete=\"name\"\r\n                                name=\"name\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"name\"\r\n                                label=\"Name\"\r\n                                autoFocus\r\n                                onChange={(e) => {\r\n                                    setName(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                onChange={(e) => {\r\n                                    setEmail(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                onChange={(e) => {\r\n                                    setPassword(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                        Sign Up\r\n                    </Button>\r\n                    <Grid container justifyContent=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link to={'/login'} variant=\"body2\" style={{ textDecoration: 'none' }}>\r\n                                <Typography color=\"textSecondary\">Already have an account? Sign in</Typography>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n","import { useMutation } from '@apollo/client';\r\nimport { useRef, useState } from 'react';\r\nimport { createPostOneQuery } from '../../graphql/post';\r\nimport { TextField, Button, Container } from '@material-ui/core';\r\n\r\nexport function PostCreatorOne({ user, refetch }) {\r\n    const [createPost] = useMutation(createPostOneQuery);\r\n    const [content, setContent] = useState('');\r\n    const submit = useRef(0);\r\n\r\n    return (\r\n        <div style={{ marginTop: 50 }}>\r\n            <Container>\r\n                <form\r\n                    onSubmitCapture={async (e) => {\r\n                        e.preventDefault();\r\n\r\n                        if (user !== null) {\r\n                            await createPost({\r\n                                variables: {\r\n                                    user,\r\n                                    content,\r\n                                },\r\n                            });\r\n\r\n                            refetch();\r\n                            setContent('');\r\n                            submit.current.style.visibility = 'hidden';\r\n                        }\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        multiline\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        placeholder=\"Create your post\"\r\n                        minRows={4}\r\n                        value={content}\r\n                        style={{ textAlign: 'left' }}\r\n                        onChange={(e) => {\r\n                            submit.current.style.visibility = !e.target.value ? 'hidden' : 'visible';\r\n                            setContent(e.target.value);\r\n                        }}\r\n                    />\r\n                    <center>\r\n                        <Button\r\n                            ref={submit}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            type=\"primary\"\r\n                            style={{ visibility: 'hidden' }}\r\n                        >\r\n                            create a post\r\n                        </Button>\r\n                    </center>\r\n                </form>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { likePostOne, unlikePostOne } from '../../graphql/like';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, IconButton, Grid, ListItem, ListItemText, ListItemIcon } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles({\r\n    post: {\r\n        maxWidth: 1250,\r\n        minWidth: 100,\r\n        marginTop: 15,\r\n    },\r\n});\r\n\r\nexport function PostOne({ item, user }) {\r\n    const classes = useStyles();\r\n    const [likeButton, setLikeButton] = useState(item.isLikedByUser ? Favorite : FavoriteBorder);\r\n    const [likeButtonText, setLikeButtonText] = useState(item.likes);\r\n    const [like] = useMutation(likePostOne);\r\n    const [unlike] = useMutation(unlikePostOne);\r\n\r\n    return (\r\n        <Grid item xs>\r\n            <Paper elevation={3} className={classes.post}>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        style={{ wordWrap: 'break-word' }}\r\n                        primary={item.user.name}\r\n                        secondary={item.content}\r\n                    />\r\n                    <ListItemIcon>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            key={`${item.id}-1`}\r\n                            onClick={async () => {\r\n                                if (likeButton === Favorite) {\r\n                                    setLikeButton(FavoriteBorder);\r\n                                    setLikeButtonText(parseInt(likeButtonText) - 1);\r\n                                    await unlike({ variables: { user: user, post: item.id } });\r\n                                } else {\r\n                                    setLikeButton(Favorite);\r\n                                    setLikeButtonText(parseInt(likeButtonText) + 1);\r\n                                    await like({ variables: { user: user, post: item.id } });\r\n                                }\r\n                            }}\r\n                        >\r\n                            <IconText icon={likeButton} text={likeButtonText} key={item.id} />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                </ListItem>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nconst IconText = ({ icon, text }) => (\r\n    <div>\r\n        {React.createElement(icon)}\r\n        {text}\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Waypoint } from 'react-waypoint';\r\nimport { List } from '@material-ui/core';\r\nimport { PostOne } from './Post1';\r\n\r\nexport const PostsDataOne = ({ user, loading, data, fetchMore }) => {\r\n    if (loading) return <div></div>;\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                {data.postsOne.posts.map((x, i) => (\r\n                    <React.Fragment key={`${i}-${user}-${x.id}-1`}>\r\n                        <List>\r\n                            <PostOne item={x} user={user} />\r\n                        </List>\r\n                        {data.postsOne.hasMore && i === data.postsOne.posts.length - 5 && (\r\n                            <Waypoint\r\n                                onEnter={() => {\r\n                                    fetchMore({\r\n                                        variables: {\r\n                                            user: user,\r\n                                            limit: 5,\r\n                                            cursor: parseInt(data.postsOne.posts[data.postsOne.posts.length - 1].id),\r\n                                        },\r\n                                        updateQuery: (pv, { fetchMoreResult }) => {\r\n                                            if (!fetchMoreResult) {\r\n                                                return pv;\r\n                                            }\r\n\r\n                                            return {\r\n                                                postsOne: {\r\n                                                    __typename: 'PostsType',\r\n                                                    hasMore: fetchMoreResult.postsOne.hasMore,\r\n                                                    posts: [...pv.postsOne.posts, ...fetchMoreResult.postsOne.posts],\r\n                                                },\r\n                                            };\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </React.Fragment>\r\n                ))}\r\n            </center>\r\n        </div>\r\n    );\r\n};\r\n","import { useQuery } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { client } from '../..';\r\nimport { PostCreatorOne } from '../../components/cqrs/PostCreator1';\r\nimport { PostsDataOne } from '../../components/cqrs/PostsData1';\r\nimport { Header } from '../../components/Header';\r\nimport { postsOneQuery } from '../../graphql/post';\r\nimport { meQuery } from '../../graphql/user';\r\n\r\nexport function HomeOne() {\r\n    const [state, setState] = useState(0);\r\n\r\n    let user = null;\r\n    const cache = client.readQuery({ query: meQuery });\r\n\r\n    if (cache && cache.me) {\r\n        user = cache.me.id;\r\n    }\r\n\r\n    const query = useQuery(meQuery, {\r\n        skip: cache,\r\n    });\r\n\r\n    if (query && query.me) {\r\n        user = query.me.id;\r\n    }\r\n\r\n    const { loading, data, fetchMore, refetch } = useQuery(postsOneQuery, {\r\n        variables: {\r\n            user: user,\r\n            limit: 10,\r\n            cursor: 0,\r\n        },\r\n    });\r\n\r\n    const location = useLocation();\r\n    if (location.state && location.state.refetch) {\r\n        setState(state + 1);\r\n        client.refetchQueries({ include: 'active' });\r\n        location.state.refetch = false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Header props />\r\n            </div>\r\n            <br />\r\n            <div>\r\n                <PostCreatorOne user={user} refetch={refetch} />\r\n                <PostsDataOne user={user} loading={loading} data={data} fetchMore={fetchMore} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useMutation } from '@apollo/client';\r\nimport { useRef, useState } from 'react';\r\nimport { createPostTwoQuery } from '../../graphql/post';\r\nimport { TextField, Button, Container } from '@material-ui/core';\r\n\r\nexport function PostCreatorTwo({ user, refetch }) {\r\n    const [createPost] = useMutation(createPostTwoQuery);\r\n    const [content, setContent] = useState('');\r\n    const submit = useRef(0);\r\n\r\n    return (\r\n        <div style={{ marginTop: 50 }}>\r\n            <Container>\r\n                <form\r\n                    onSubmitCapture={async (e) => {\r\n                        e.preventDefault();\r\n\r\n                        if (user !== null) {\r\n                            await createPost({\r\n                                variables: {\r\n                                    user,\r\n                                    content,\r\n                                },\r\n                            });\r\n\r\n                            refetch();\r\n                            setContent('');\r\n                            submit.current.style.visibility = 'hidden';\r\n                        }\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        multiline\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        placeholder=\"Create your post\"\r\n                        minRows={4}\r\n                        value={content}\r\n                        style={{ textAlign: 'left' }}\r\n                        onChange={(e) => {\r\n                            submit.current.style.visibility = !e.target.value ? 'hidden' : 'visible';\r\n                            setContent(e.target.value);\r\n                        }}\r\n                    />\r\n                    <center>\r\n                        <Button\r\n                            ref={submit}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            type=\"primary\"\r\n                            style={{ visibility: 'hidden' }}\r\n                        >\r\n                            create a post\r\n                        </Button>\r\n                    </center>\r\n                </form>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { likePostTwo, unlikePostTwo } from '../../graphql/like';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, IconButton, Grid, ListItem, ListItemText, ListItemIcon } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles({\r\n    post: {\r\n        maxWidth: 1250,\r\n        minWidth: 100,\r\n        marginTop: 15,\r\n    },\r\n});\r\n\r\nexport function PostTwo({ item, user }) {\r\n    const classes = useStyles();\r\n    const [likeButton, setLikeButton] = useState(item.isLikedByUser ? Favorite : FavoriteBorder);\r\n    const [likeButtonText, setLikeButtonText] = useState(item.likes);\r\n    const [like] = useMutation(likePostTwo);\r\n    const [unlike] = useMutation(unlikePostTwo);\r\n\r\n    return (\r\n        <Grid item xs>\r\n            <Paper elevation={3} className={classes.post}>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        style={{ wordWrap: 'break-word' }}\r\n                        primary={item.user.name}\r\n                        secondary={item.content}\r\n                    />\r\n                    <ListItemIcon>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            key={`${item.id}-2`}\r\n                            onClick={async () => {\r\n                                if (likeButton === Favorite) {\r\n                                    setLikeButton(FavoriteBorder);\r\n                                    setLikeButtonText(parseInt(likeButtonText) - 1);\r\n                                    await unlike({ variables: { user: user, post: item.id } });\r\n                                } else {\r\n                                    setLikeButton(Favorite);\r\n                                    setLikeButtonText(parseInt(likeButtonText) + 1);\r\n                                    await like({ variables: { user: user, post: item.id } });\r\n                                }\r\n                            }}\r\n                        >\r\n                            <IconText icon={likeButton} text={likeButtonText} key={item.id} />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                </ListItem>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nconst IconText = ({ icon, text }) => (\r\n    <div>\r\n        {React.createElement(icon)}\r\n        {text}\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Waypoint } from 'react-waypoint';\r\nimport { List } from '@material-ui/core';\r\nimport { PostTwo } from './Post2';\r\n\r\nexport const PostsDataTwo = ({ user, loading, data, fetchMore }) => {\r\n    if (loading) return <div></div>;\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                {data.postsTwo.posts.map((x, i) => (\r\n                    <React.Fragment key={`${i}-${user}-${x.id}-2`}>\r\n                        <List>\r\n                            <PostTwo item={x} user={user} />\r\n                        </List>\r\n                        {data.postsTwo.hasMore && i === data.postsTwo.posts.length - 5 && (\r\n                            <Waypoint\r\n                                onEnter={() => {\r\n                                    fetchMore({\r\n                                        variables: {\r\n                                            user: user,\r\n                                            limit: 5,\r\n                                            cursor: parseInt(data.postsTwo.posts[data.postsTwo.posts.length - 1].id),\r\n                                        },\r\n                                        updateQuery: (pv, { fetchMoreResult }) => {\r\n                                            if (!fetchMoreResult) {\r\n                                                return pv;\r\n                                            }\r\n\r\n                                            return {\r\n                                                postsTwo: {\r\n                                                    __typename: 'PostsType',\r\n                                                    hasMore: fetchMoreResult.postsTwo.hasMore,\r\n                                                    posts: [...pv.postsTwo.posts, ...fetchMoreResult.postsTwo.posts],\r\n                                                },\r\n                                            };\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </React.Fragment>\r\n                ))}\r\n            </center>\r\n        </div>\r\n    );\r\n};\r\n","import { useQuery } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { client } from '../..';\r\nimport { PostCreatorTwo } from '../../components/cqrs/PostCreator2';\r\nimport { PostsDataTwo } from '../../components/cqrs/PostsData2';\r\nimport { Header } from '../../components/Header';\r\nimport { postsTwoQuery } from '../../graphql/post';\r\nimport { meQuery } from '../../graphql/user';\r\n\r\nexport function HomeTwo() {\r\n    const [state, setState] = useState(0);\r\n\r\n    let user = null;\r\n    const cache = client.readQuery({ query: meQuery });\r\n\r\n    if (cache && cache.me) {\r\n        user = cache.me.id;\r\n    }\r\n\r\n    const query = useQuery(meQuery, {\r\n        skip: cache,\r\n    });\r\n\r\n    if (query && query.me) {\r\n        user = query.me.id;\r\n    }\r\n\r\n    const { loading, data, fetchMore, refetch } = useQuery(postsTwoQuery, {\r\n        variables: {\r\n            user: user,\r\n            limit: 10,\r\n            cursor: 0,\r\n        },\r\n    });\r\n\r\n    const location = useLocation();\r\n    if (location.state && location.state.refetch) {\r\n        setState(state + 1);\r\n        client.refetchQueries({ include: 'active' });\r\n        location.state.refetch = false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Header props />\r\n            </div>\r\n            <br />\r\n            <div>\r\n                <PostCreatorTwo user={user} refetch={refetch} />\r\n                <PostsDataTwo user={user} loading={loading} data={data} fetchMore={fetchMore} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useMutation } from '@apollo/client';\r\nimport { useRef, useState } from 'react';\r\nimport { createPostThreeQuery } from '../../graphql/post';\r\nimport { TextField, Button, Container } from '@material-ui/core';\r\n\r\nexport function PostCreatorThree({ user, refetch }) {\r\n    const [createPost] = useMutation(createPostThreeQuery);\r\n    const [content, setContent] = useState('');\r\n    const submit = useRef(0);\r\n\r\n    return (\r\n        <div style={{ marginTop: 50 }}>\r\n            <Container>\r\n                <form\r\n                    onSubmitCapture={async (e) => {\r\n                        e.preventDefault();\r\n\r\n                        if (user !== null) {\r\n                            await createPost({\r\n                                variables: {\r\n                                    user,\r\n                                    content,\r\n                                },\r\n                            });\r\n\r\n                            refetch();\r\n                            setContent('');\r\n                            submit.current.style.visibility = 'hidden';\r\n                        }\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        multiline\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        placeholder=\"Create your post\"\r\n                        minRows={4}\r\n                        value={content}\r\n                        style={{ textAlign: 'left' }}\r\n                        onChange={(e) => {\r\n                            submit.current.style.visibility = !e.target.value ? 'hidden' : 'visible';\r\n                            setContent(e.target.value);\r\n                        }}\r\n                    />\r\n                    <center>\r\n                        <Button\r\n                            ref={submit}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            type=\"primary\"\r\n                            style={{ visibility: 'hidden' }}\r\n                        >\r\n                            create a post\r\n                        </Button>\r\n                    </center>\r\n                </form>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { likePostThree, unlikePostThree } from '../../graphql/like';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, IconButton, Grid, ListItem, ListItemText, ListItemIcon } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles({\r\n    post: {\r\n        maxWidth: 1250,\r\n        minWidth: 100,\r\n        marginTop: 15,\r\n    },\r\n});\r\n\r\nexport function PostThree({ item, user }) {\r\n    const classes = useStyles();\r\n    const [likeButton, setLikeButton] = useState(item.isLikedByUser ? Favorite : FavoriteBorder);\r\n    const [likeButtonText, setLikeButtonText] = useState(item.likes);\r\n    const [like] = useMutation(likePostThree);\r\n    const [unlike] = useMutation(unlikePostThree);\r\n\r\n    return (\r\n        <Grid item xs>\r\n            <Paper elevation={3} className={classes.post}>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        style={{ wordWrap: 'break-word' }}\r\n                        primary={item.user.name}\r\n                        secondary={item.content}\r\n                    />\r\n                    <ListItemIcon>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            key={`${item.id}-3`}\r\n                            onClick={async () => {\r\n                                if (likeButton === Favorite) {\r\n                                    setLikeButton(FavoriteBorder);\r\n                                    setLikeButtonText(parseInt(likeButtonText) - 1);\r\n                                    await unlike({ variables: { user: user, post: item.id } });\r\n                                } else {\r\n                                    setLikeButton(Favorite);\r\n                                    setLikeButtonText(parseInt(likeButtonText) + 1);\r\n                                    await like({ variables: { user: user, post: item.id } });\r\n                                }\r\n                            }}\r\n                        >\r\n                            <IconText icon={likeButton} text={likeButtonText} key={item.id} />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                </ListItem>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nconst IconText = ({ icon, text }) => (\r\n    <div>\r\n        {React.createElement(icon)}\r\n        {text}\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Waypoint } from 'react-waypoint';\r\nimport { List } from '@material-ui/core';\r\nimport { PostThree } from './Post3';\r\n\r\nexport const PostsDataThree = ({ user, loading, data, fetchMore }) => {\r\n    if (loading) return <div></div>;\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                {data.postsThree.posts.map((x, i) => (\r\n                    <React.Fragment key={`${i}-${user}-${x.id}-3`}>\r\n                        <List>\r\n                            <PostThree item={x} user={user} />\r\n                        </List>\r\n                        {data.postsThree.hasMore && i === data.postsThree.posts.length - 5 && (\r\n                            <Waypoint\r\n                                onEnter={() => {\r\n                                    fetchMore({\r\n                                        variables: {\r\n                                            user: user,\r\n                                            limit: 5,\r\n                                            cursor: parseInt(\r\n                                                data.postsThree.posts[data.postsThree.posts.length - 1].id\r\n                                            ),\r\n                                        },\r\n                                        updateQuery: (pv, { fetchMoreResult }) => {\r\n                                            if (!fetchMoreResult) {\r\n                                                return pv;\r\n                                            }\r\n\r\n                                            return {\r\n                                                postsThree: {\r\n                                                    __typename: 'PostsType',\r\n                                                    hasMore: fetchMoreResult.postsThree.hasMore,\r\n                                                    posts: [\r\n                                                        ...pv.postsThree.posts,\r\n                                                        ...fetchMoreResult.postsThree.posts,\r\n                                                    ],\r\n                                                },\r\n                                            };\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </React.Fragment>\r\n                ))}\r\n            </center>\r\n        </div>\r\n    );\r\n};\r\n","import { useQuery } from '@apollo/client';\r\nimport React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { client } from '../..';\r\nimport { PostCreatorThree } from '../../components/cqrs/PostCreator3';\r\nimport { PostsDataThree } from '../../components/cqrs/PostsData3';\r\nimport { Header } from '../../components/Header';\r\nimport { postsThreeQuery } from '../../graphql/post';\r\nimport { meQuery } from '../../graphql/user';\r\n\r\nexport function HomeThree() {\r\n    const [state, setState] = useState(0);\r\n\r\n    let user = null;\r\n    const cache = client.readQuery({ query: meQuery });\r\n\r\n    if (cache && cache.me) {\r\n        user = cache.me.id;\r\n    }\r\n\r\n    const query = useQuery(meQuery, {\r\n        skip: cache,\r\n    });\r\n\r\n    if (query && query.me) {\r\n        user = query.me.id;\r\n    }\r\n\r\n    const { loading, data, fetchMore, refetch } = useQuery(postsThreeQuery, {\r\n        variables: {\r\n            user: user,\r\n            limit: 10,\r\n            cursor: 0,\r\n        },\r\n    });\r\n\r\n    const location = useLocation();\r\n    if (location.state && location.state.refetch) {\r\n        setState(state + 1);\r\n        client.refetchQueries({ include: 'active' });\r\n        location.state.refetch = false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Header props />\r\n            </div>\r\n            <br />\r\n            <div>\r\n                <PostCreatorThree user={user} refetch={refetch} />\r\n                <PostsDataThree user={user} loading={loading} data={data} fetchMore={fetchMore} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { BrowserRouter, Switch } from 'react-router-dom';\r\nimport { UserRoute } from '../routes/UserRoute';\r\nimport { PublicRoute } from '../routes/PublicRoute';\r\nimport { Home } from '../views/home';\r\nimport { Login } from '../views/login';\r\nimport { Register } from '../views/register';\r\nimport { HomeOne } from '../views/cqrs/home1';\r\nimport { HomeTwo } from '../views/cqrs/home2';\r\nimport { HomeThree } from '../views/cqrs/home3';\r\n\r\nexport function Routes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <div>\r\n                <Switch>\r\n                    <UserRoute exact path=\"/\" component={Home}></UserRoute>\r\n                    <UserRoute exact path=\"/cqrs1\" component={HomeOne}></UserRoute>\r\n                    <UserRoute exact path=\"/cqrs2\" component={HomeTwo}></UserRoute>\r\n                    <UserRoute exact path=\"/cqrs3\" component={HomeThree}></UserRoute>\r\n                    <PublicRoute exact path=\"/login\" component={Login}></PublicRoute>\r\n                    <PublicRoute exact path=\"/register\" component={Register}></PublicRoute>\r\n                </Switch>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","import { createTheme } from '@material-ui/core';\r\n\r\nexport const darkTheme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n});\r\n","import '@fontsource/roboto';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport { setAccessToken } from '../utils/token';\nimport { Routes } from './Routes';\nimport { darkTheme } from '../utils/theme';\n\nexport function App() {\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetch('/auth', {\n            method: 'POST',\n            credentials: 'include',\n        }).then(async (data) => {\n            const { accessToken } = await data.json();\n            setAccessToken(accessToken);\n            setLoading(false);\n        });\n    }, []);\n\n    if (loading) {\n        return <div>...</div>;\n    }\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <div className=\"App\">\n                <CssBaseline />\n                <Routes />\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { getAccessToken, isAccessTokenValid, setAccessToken } from './token';\r\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\r\nimport { HttpLink, ApolloLink } from '@apollo/client';\r\n\r\nexport const httpLink = new HttpLink({\r\n    uri: '/graphql',\r\n    credentials: 'include',\r\n});\r\n\r\nexport const authLink = new ApolloLink((operation, forward) => {\r\n    const accessToken = getAccessToken();\r\n    operation.setContext(({ headers = {} }) => ({\r\n        headers: {\r\n            ...headers,\r\n            Authorization: accessToken ? `Bearer ${accessToken}` : '',\r\n        },\r\n    }));\r\n\r\n    return forward(operation);\r\n});\r\n\r\nexport const tokenRefreshLink = new TokenRefreshLink({\r\n    accessTokenField: 'accessToken',\r\n    isTokenValidOrUndefined: () => isAccessTokenValid(),\r\n    fetchAccessToken: () => {\r\n        return fetch('/auth', {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n        });\r\n    },\r\n    handleFetch: (accessToken) => {\r\n        setAccessToken(accessToken);\r\n    },\r\n});\r\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient, InMemoryCache, from } from '@apollo/client';\nimport { authLink, httpLink, tokenRefreshLink } from './utils/links';\n\nexport const client = new ApolloClient({\n    cache: new InMemoryCache({\n        typePolicies: {\n            posts: {\n                keyFields: ['id', 'userRequesting'],\n            },\n        },\n    }),\n    credentials: 'include',\n    link: from([tokenRefreshLink, authLink, httpLink]),\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}